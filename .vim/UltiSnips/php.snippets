# FIXME: define email as a variable
# Removed : interestign but no Class ${1:`!p snip.rv=snip.fn.capitalize().split('.')[0]`} 
snippet class "Class declaration template" !b
/**
 * $2
 */
class $1
{
    $3
}
$0
endsnippet
# ${2:`!p snip.rv='\n'.join(t[1].split(',')[0])`}
# FIXME: handle empty constructors by moving 1st indent outside the loop
snippet __c "Constructor, needs default args support"
public function __construct(${1})
{
${2:`!p 
matches = re.findall('\$([a-zA-Z0-9_]+)', t[1])
snip.shift(1)
for match in matches:
    snip.rv += snip.mkline("$this->" + match + " = $" + match + ";") + '\n'
        `}
}
endsnippet

snippet try "try catch block"
try {
${VISUAL}   ${1}
}
catch (Exception $e) {
    ${2:echo $e->getMessage();}
}

endsnippet

snippet fix "FIXME"
// FIXME: $1
endsnippet

snippet pp "print_r"
print_r($1);
endsnippet

snippet ppp "print_r"
echo "<pre>" . print_r($1, true) . "</pre>";
endsnippet

snippet vd "var_dump"
var_dump($1);
endsnippet

snippet echo "debug echo"
echo "\\$1: {$1}\n";
endsnippet

snippet pf "public function"
public function ${1}(${2})
{
	${3}
}
endsnippet

snippet psf "public static function"
public static function ${1}()
{
	${2}
}
endsnippet

snippet pof "protected function"
protected function ${1}()
{
	${2}
}
endsnippet

snippet prf "private function"
private function ${1}()
{
	${2}
}
endsnippet

snippet t "PHPUnit test function"
public function test${1:One}()
{
    ${2}
}
endsnippet

snippet testc "PHPUnit test skeleton"

class $4Test extends \PHPUnit_Framework_Testcase
{
    public function test${5:One}()
    {
	${5}
    }
}
endsnippet

snippet php "Open tag"
<?php 

${1}
endsnippet

snippet ph "short open tag"
<?php ${1} ?>
endsnippet

snippet iterator "Spl Iterator"

/**
 * Class ${1:`!p snip.rv=snip.fn.capitalize().split('.')[0]`} 
 *
 * @author Benjamin Johnson <benpjohnson@gmail.com>
 * @package $2
 * @subpackage $3
 */
class $1 implements Iterator
{
    /**
     * Get the current $1 
     * 
     * @access public
     * @return mixed
     */
    function current()                                                                                                       
    {

    }
    
    /**
     * Get the key for the current element
     * 
     * @access public
     * @return mixed
     */
    function key()                                                                                                          
    {

    }

    /**
     * Move to the next element
     * 
     * @access public
     * @return void
     */
    function next()                                                                                                           
    {

    }

    /**
     * Reset to position zero
     * 
     * @access public
     * @return void
     */
    function rewind()                                                                                                         
    {

    }

    /**
     * Check if the current element is valid
     * 
     * @access public
     * @return void
     */
    function valid()                                                                                                         
    {

    }
}

endsnippet

snippet rawpost "curl raw post request"
$ch = curl_init();
curl_setopt($ch, CURLOPT_URL, 'http://);
curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
curl_setopt($ch, CURLOPT_POST, 1);
curl_setopt($ch, CURLOPT_POSTFIELDS, "body goes here" ); 
curl_setopt($ch, CURLOPT_HTTPHEADER,  array('Content-Type: application/json')); 
endsnippet

snippet mysqli "MySQLi Connection"

$mysqli = new mysqli(${1:\$server}, ${2:\$user}, ${3:$password}, ${4:\$database});

if (\$mysqli->connect_errno) {
        throw new Exception("Failed to connect to MySQL: (" . $mysqli->connect_errno . ") " . $mysqli->connect_error);
}

endsnippet

snippet isset "Regular use for isset"
	isset(${1:\$var}) ? $1 : ${3:false};
endsnippet

snippet getter "PHP Class Getter" !b
public function get${1/\w+\s*/\u$0/}() 
{
    return $this->$1;$2
}
$4
endsnippet

snippet setter "PHP Class Setter" !b
public function set${1/\w+\s*/\u$0/}($$1)
{
    $this->$1 = $$1;$3
}
$0
endsnippet

snippet namespace "Expand namespace based on path vs working directory"
namespace ${1:`!v put =expand("%h")`}
endsnippet

snippet pdo
$db = new PDO('mysql:dbname=${1};host=${2:localhost}', '${3:root}', ${4:null});
$db->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);
$sql = "${5}";
$result = $db->query($sql);
$row = $result->fetch();
endsnippet

snippet p
public ${1}
endsnippet

snippet pr
private ${1}
endsnippet

snippet fn
${1:`!p
import os
snip.rv = os.path.splitext(fn)[0]
`}
endsnippet

snippet setup
public function setup()
{
    ${1}
}
endsnippet

# Want this to be able to generate based on path
snippet ns "WIP on namespaces"
namespace $1;
endsnippet

snippet if
if ($1) {
    $2
}
endsnippet

#FIXME: would be nice to select from a list (string|mixed|etc) I think this is
#possible if memory serves
snippet @ "PHPDoc @var"
@var ${1:string}
endsnippet
snippet @r "PHPDoc @return"
@return ${1:string}
endsnippet

snippet expects
expects({$this->once()}
->will($this->returnValue());
endsnippet

snippet bootstrap
$bootstrap = Config::get('bootstrap');
$serviceFactory = new Application_Factory_Service($bootstrap);
${1:name}Service = $serviceFactory->create("${1:name}");
endsnippet
