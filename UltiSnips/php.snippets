snippet class "Class declaration template" !b
/**
 * Class ${1:`!p snip.rv=snip.fn.capitalize().split('.')[0]`} 
 *
 * @author Benjamin Johnson <benpjohnson@gmail.com>
 * @package $2
 * @subpackage $3
 */
class $1
{
    public function ${4:__construct}(${5:$options})
    {
        ${5:// code}
    }
}
$0
endsnippet

snippet try "try catch block"
try {
${VISUAL}   ${1}
}
catch (Exception $e) {
    ${2:echo $e->getMessage();}
}

endsnippet

snippet fix "FIXME"
// FIXME: $1
endsnippet

snippet pp "print_r"
print_r($1);
endsnippet

snippet vd "var_dump"
var_dump($1);
endsnippet

snippet echo "debug echo"
echo "\\$1: {$1}\n";
endsnippet

snippet pf "public function"
public function 
endsnippet

snippet prf "private function"
private function 
endsnippet

snippet test "PHPUnit test function"
/**
 * $1
 **/
public function test${2:One}()
{
    ${3}
}
endsnippet

snippet php "Open tag"
<?php 

${1}
endsnippet

snippet ph "short open tag"
<?php ${1} ?>
endsnippet

snippet Iterator "Spl Iterator"

/**
 * Class ${1:`!p snip.rv=snip.fn.capitalize().split('.')[0]`} 
 *
 * @author Benjamin Johnson <benpjohnson@gmail.com>
 * @package $2
 * @subpackage $3
 */
class $1 implements Iterator
{
    /**
     * Get the current $1 
     * 
     * @access public
     * @return mixed
     */
    function current()                                                                                                       
    {

    }
    
    /**
     * Get the key for the current element
     * 
     * @access public
     * @return mixed
     */
    function key()                                                                                                          
    {

    }

    /**
     * Move to the next element
     * 
     * @access public
     * @return void
     */
    function next()                                                                                                           
    {

    }

    /**
     * Reset to position zero
     * 
     * @access public
     * @return void
     */
    function rewind()                                                                                                         
    {

    }

    /**
     * Check if the current element is valid
     * 
     * @access public
     * @return void
     */
    function valid()                                                                                                         
    {

    }
}

endsnippet

snippet rawpost "curl raw post request"
$ch = curl_init();
curl_setopt($ch, CURLOPT_URL, 'http://);
curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
curl_setopt($ch, CURLOPT_POST, 1);
curl_setopt($ch, CURLOPT_POSTFIELDS, "body goes here" ); 
curl_setopt($ch, CURLOPT_HTTPHEADER,  array('Content-Type: application/json')); 
endsnippet

snippet mysqli "MySQLi Connection"

$mysqli = new mysqli(${1:\$server}, ${2:\$user}, ${3:$password}, ${4:\$database});

if (\$mysqli->connect_errno) {
        throw new Exception("Failed to connect to MySQL: (" . $mysqli->connect_errno . ") " . $mysqli->connect_error);
}

endsnippet

snippet isset "Regular use for isset"
	isset(${1:\$var}) ? $1 : ${3:false};
endsnippet



